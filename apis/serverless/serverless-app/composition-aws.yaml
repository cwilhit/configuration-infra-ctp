apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: aws.xserverlessapps.infrastructure.example.org
  labels:
    provider: aws
spec:
  compositeTypeRef:
    apiVersion: infrastructure.example.org/v1alpha1
    kind: XServerlessApp
  resources:
    # The cognito user pool XR
    - name: cognito
      base: 
        apiVersion: infrastructure.example.org/v1alpha1
        kind: XCompositeCognito
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: status.branchName
          toFieldPath: spec.branchName
        - type: FromCompositeFieldPath
          fromFieldPath: status.domain
          toFieldPath: spec.domain
        - type: ToCompositeFieldPath
          fromFieldPath: status.userPoolArn
          toFieldPath: status.userPoolArn
          policy:
            fromFieldPath: Required
    # The Lambda + API Gateway XR
    - name: lambda
      base: 
        apiVersion: infrastructure.example.org/v1alpha1
        kind: XCompositeFunction
        spec:
          key: GetTodoFunction.zip
          handler: app.getToDoItem
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.location
          toFieldPath: spec.location
        - type: FromCompositeFieldPath
          fromFieldPath: status.eventSourceArn
          toFieldPath: spec.tableName
        - type: FromCompositeFieldPath
          fromFieldPath: status.userPoolArn
          toFieldPath: spec.userPoolArn
    # The Lambda + API Gateway XR
    - name: amplify
      base: 
        apiVersion: infrastructure.example.org/v1alpha1
        kind: XCompositeAmplify
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.repository
          toFieldPath: spec.repository
        - type: ToCompositeFieldPath
          fromFieldPath: status.domain
          toFieldPath: status.domain
          policy:
            fromFieldPath: Required
        - type: ToCompositeFieldPath
          fromFieldPath: status.branchName
          toFieldPath: status.branchName
          policy:
            fromFieldPath: Required
    # The DynamoDB table used to hold all the ToDo items for all users
    - name: dynamo-table
      base:
        apiVersion: dynamodb.aws.upbound.io/v1beta1
        kind: Table
        metadata:
          name: dbtable
        spec:
          forProvider:
            attribute:
              - name: cognito-username
                type: S
              - name: id
                type: S
            hashKey: cognito-username
            rangeKey: id
            readCapacity: 1
            region: us-west-1
            writeCapacity: 1
            serverSideEncryption: 
              - enabled: true
            billingMode: PROVISIONED
            streamEnabled: true
            streamViewType: NEW_AND_OLD_IMAGES
            readCapacity: 5
            writeCapacity: 5
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters.id
          toFieldPath: spec.metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-dbtable"
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.streamArn
          toFieldPath: status.eventSourceArn
          policy:
            fromFieldPath: Required
    # The bucket (already exists, we are bringing it under management by XP) hosting the Lambda functions
    - name: src-bucket
      base:
        apiVersion: s3.aws.upbound.io/v1beta1
        kind: Bucket
        metadata:
          name: src-bucket
          annotations:
            crossplane.io/external-name: craig-stack-lambda-bucket
          labels:
            infrastructure.example.org/bucket-src: bucket-src
        spec:
          forProvider:
            region: us-west-1
          providerConfigRef:
            name: default
          deletionPolicy: Orphan
      patches:
        - fromFieldPath: spec.parameters.lambdaBucket
          toFieldPath: metadata[crossplane.io/external-name]



    # The Lambda function used to retrieve all the ToDo items
    # - base:
    #     apiVersion: lambda.aws.upbound.io/v1beta1
    #     kind: Function
    #     spec:
    #       forProvider:
    #         handler: index.py
    #         region: us-east-1
    #         roleRef:
    #           name: sample-role
    #         runtime: python3.9
    #         s3Bucket: upbound-provider-test-data
    #         s3Key: hello-python.zip
    #   patches:
    #     - fromFieldPath: spec.parameters.location
    #       toFieldPath: spec.forProvider.location
    #       transforms:
    #         - type: map
    #           map:
    #             'East US': 'us-east-1'
    #             'West US': 'us-west-1'
    # # The Lambda function used to set the state of an item to complete
    # - base:
    #     apiVersion: lambda.aws.upbound.io/v1beta1
    #     kind: Function
    #     spec:
    #       forProvider:
    #         handler: index.py
    #         region: us-east-1
    #         roleRef:
    #           name: sample-role
    #         runtime: python3.9
    #         s3Bucket: upbound-provider-test-data
    #         s3Key: hello-python.zip
    #   patches:
    #     - fromFieldPath: spec.parameters.location
    #       toFieldPath: spec.forProvider.location
    #       transforms:
    #         - type: map
    #           map:
    #             'East US': 'us-east-1'
    #             'West US': 'us-west-1'
    # # The Lambda function used to create a new ToDo item
    # - base:
    #     apiVersion: lambda.aws.upbound.io/v1beta1
    #     kind: Function
    #     spec:
    #       forProvider:
    #         handler: index.py
    #         region: us-east-1
    #         roleRef:
    #           name: sample-role
    #         runtime: python3.9
    #         s3Bucket: upbound-provider-test-data
    #         s3Key: hello-python.zip
    #   patches:
    #     - fromFieldPath: spec.parameters.location
    #       toFieldPath: spec.forProvider.location
    #       transforms:
    #         - type: map
    #           map:
    #             'East US': 'us-east-1'
    #             'West US': 'us-west-1'
    # # The Lambda function used to update the content of a ToDo item
    # - base:
    #     apiVersion: lambda.aws.upbound.io/v1beta1
    #     kind: Function
    #     spec:
    #       forProvider:
    #         handler: index.py
    #         region: us-east-1
    #         roleRef:
    #           name: sample-role
    #         runtime: python3.9
    #         s3Bucket: upbound-provider-test-data
    #         s3Key: hello-python.zip
    #   patches:
    #     - fromFieldPath: spec.parameters.location
    #       toFieldPath: spec.forProvider.location
    #       transforms:
    #         - type: map
    #           map:
    #             'East US': 'us-east-1'
    #             'West US': 'us-west-1'
    # # The Lambda function used to delete a ToDo item
    # - base:
    #     apiVersion: lambda.aws.upbound.io/v1beta1
    #     kind: Function
    #     spec:
    #       forProvider:
    #         handler: index.py
    #         region: us-east-1
    #         roleRef:
    #           name: sample-role
    #         runtime: python3.9
    #         s3Bucket: upbound-provider-test-data
    #         s3Key: hello-python.zip
    #   patches:
    #     - fromFieldPath: spec.parameters.location
    #       toFieldPath: spec.forProvider.location
    #       transforms:
    #         - type: map
    #           map:
    #             'East US': 'us-east-1'
    #             'West US': 'us-west-1'
    # # An IAM role that allows API Gateway to send log events to CloudWatch Logs
    # - base:
    #     apiVersion: iam.aws.upbound.io/v1beta1
    #     kind: Role
    #     metadata:
    #       annotations:
    #         meta.upbound.io/example-id: sagemaker/v1beta1/device
    #       labels:
    #         testing.upbound.io/example-name: example
    #       name: example
    #     spec:
    #       forProvider:
    #         assumeRolePolicy: |
    #           {
    #             "Version": "2012-10-17",
    #             "Statement": [
    #               {
    #                 "Effect": "Allow",
    #                 "Principal": {
    #                   "Service": ["iot.amazonaws.com", "sagemaker.amazonaws.com"]
    #                 },
    #                 "Action": "sts:AssumeRole"
    #               }
    #             ]
    #           }
    