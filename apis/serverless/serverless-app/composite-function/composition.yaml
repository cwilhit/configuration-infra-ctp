apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: aws.xcompositefunctions.infrastructure.example.org
  labels:
    provider: aws
spec:
  compositeTypeRef:
    apiVersion: infrastructure.example.org/v1alpha1
    kind: XCompositeFunction
  resources:
    # An IAM role for Lambda  function
    - name: lambda-iam-role
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: Role
        metadata:
          labels:
            infrastructure.example.org/iam-role: function-role
        spec:
          forProvider:
            description: "Role for a Lambda function"
            assumeRolePolicy: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": ["lambda.amazonaws.com"]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }
     # The Lambda functions
     # --------
    - name: lambda-composite
      base:
        apiVersion: lambda.aws.upbound.io/v1beta1
        kind: Function
        metadata:
          labels:
            infrastructure.example.org/event-mapping-label: lambda-composite
        spec:
          forProvider:
            handler: app.entrypoint
            region: us-west-1
            environment:
              - variables: 
                  TABLE_NAME: "table-ref"
                  AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
                  USE_DYNAMODB_LOCAL: "0"
                  DYNAMODB_LOCAL_URI: ""
            runtime: nodejs12.x
            s3BucketSelector:
              matchLabels:
                infrastructure.example.org/bucket-src: bucket-src
            s3Key: function.zip
            roleSelector:
              matchLabels:
                infrastructure.example.org/iam-role: function-role
      patches:
        - fromFieldPath: spec.location
          toFieldPath: spec.forProvider.location
          transforms:
            - type: map
              map:
                'East US': 'us-east-1'
                'West US': 'us-west-1'
        - fromFieldPath: spec.parameters.key
          toFieldPath: spec.forProvider.s3Key
        - fromFieldPath: spec.parameters.handler
          toFieldPath: spec.forProvider.handler
        # - fromFieldPath: spec.tableName
        #   toFieldPath: spec.forProvider.environment[0].variables.TABLE_NAME
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.invokeArn
          toFieldPath: status.invokeArn
          policy:
            fromFieldPath: Required
    # The permission for this function to get invoked by API Gateway
    - name: invocation-permission
      base:
        apiVersion: lambda.aws.upbound.io/v1beta1
        kind: Permission
        spec:
          forProvider:
            action: lambda:InvokeFunction
            functionNameSelector:
              matchControllerRef: true
              matchLabels:
                infrastructure.example.org/event-mapping-label: lambda-composite
            principal: apigateway.amazonaws.com
            region: us-west-1
            statementId: AllowExecutionFromAPIGateway
    # This is the API method definition of the API
    - name: lambda-apigw-method
      base:
        apiVersion: apigateway.aws.upbound.io/v1beta1
        kind: Method
        metadata:
          labels:
            infrastructure.example.org/api-item: method 
        spec:
          forProvider:
            authorization: COGNITO_USER_POOLS
            region: us-west-1
      patches:
        - fromFieldPath: spec.apiConfig.httpMethod
          toFieldPath: spec.forProvider.httpMethod
        - fromFieldPath: spec.apiConfig.apiRootId
          toFieldPath: spec.forProvider.restApiId
        - fromFieldPath: spec.apiConfig.apiParentId
          toFieldPath: spec.forProvider.resourceId
        - fromFieldPath: spec.apiConfig.authorizerId
          toFieldPath: spec.forProvider.authorizerId
    # This makes the API available for consumption by Functions
    - name: lambda-integration
      base:
        apiVersion: apigateway.aws.upbound.io/v1beta1
        kind: Integration
        spec:
          forProvider:
            httpMethodSelector:
              matchControllerRef: true
              matchLabels:
                infrastructure.example.org/api-item: method 
            region: us-west-1
            type: AWS_PROXY
            uri: lambda-invoke-arn
            integrationHttpMethod: POST
      patches:
        - fromFieldPath: status.invokeArn
          toFieldPath: spec.forProvider.uri
        - fromFieldPath: spec.apiConfig.apiRootId
          toFieldPath: spec.forProvider.restApiId
        - fromFieldPath: spec.apiConfig.apiParentId
          toFieldPath: spec.forProvider.resourceId
        
        